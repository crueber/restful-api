0 info it worked if it ends with ok
1 verbose cli [ '/Users/crueber/.nvm/v0.10.12/bin/node',
1 verbose cli   '/Users/crueber/.nvm/v0.10.12/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@1.2.32
3 info using node@v0.10.12
4 verbose publish [ '.' ]
5 verbose read json /Users/crueber/dev/clear/restful-api/package.json
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . /Users/crueber/.npm/3a52ce78-.lock
11 verbose read json package.json
12 verbose tar pack [ '/var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/tmp.tgz',
12 verbose tar pack   '.' ]
13 verbose tarball /var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/tmp.tgz
14 verbose folder .
15 info prepublish restful-api@0.0.16
16 silly lockFile 1f1177db-tar tar://.
17 verbose lock tar://. /Users/crueber/.npm/1f1177db-tar.lock
18 silly lockFile ce1607f7-56560-0-5084884646348655-tmp-tgz tar:///var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/tmp.tgz
19 verbose lock tar:///var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/tmp.tgz /Users/crueber/.npm/ce1607f7-56560-0-5084884646348655-tmp-tgz.lock
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile 1f1177db-tar tar://.
22 silly lockFile ce1607f7-56560-0-5084884646348655-tmp-tgz tar:///var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/tmp.tgz
23 silly lockFile ce1607f7-56560-0-5084884646348655-tmp-tgz tar:///var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/tmp.tgz
24 verbose tar unpack /var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/tmp.tgz
25 silly lockFile 30a4e689-56560-0-5084884646348655-package tar:///var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/package
26 verbose lock tar:///var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/package /Users/crueber/.npm/30a4e689-56560-0-5084884646348655-package.lock
27 silly lockFile ce1607f7-56560-0-5084884646348655-tmp-tgz tar:///var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/tmp.tgz
28 verbose lock tar:///var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/tmp.tgz /Users/crueber/.npm/ce1607f7-56560-0-5084884646348655-tmp-tgz.lock
29 silly gunzTarPerm modes [ '755', '644' ]
30 silly gunzTarPerm extractEntry package.json
31 silly gunzTarPerm extractEntry README.md
32 silly gunzTarPerm extractEntry lib/api.js
33 silly gunzTarPerm extractEntry lib/be_restful.js
34 silly gunzTarPerm extractEntry lib/defaults.js
35 silly gunzTarPerm extractEntry lib/responses.js
36 verbose read json /var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/package/package.json
37 silly lockFile 30a4e689-56560-0-5084884646348655-package tar:///var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/package
38 silly lockFile 30a4e689-56560-0-5084884646348655-package tar:///var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/package
39 silly lockFile ce1607f7-56560-0-5084884646348655-tmp-tgz tar:///var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/tmp.tgz
40 silly lockFile ce1607f7-56560-0-5084884646348655-tmp-tgz tar:///var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/tmp.tgz
41 verbose from cache /var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/package/package.json
42 verbose tar pack [ '/Users/crueber/.npm/restful-api/0.0.16/package.tgz',
42 verbose tar pack   '/var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/package' ]
43 verbose tarball /Users/crueber/.npm/restful-api/0.0.16/package.tgz
44 verbose folder /var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/package
45 silly lockFile 30a4e689-56560-0-5084884646348655-package tar:///var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/package
46 verbose lock tar:///var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/package /Users/crueber/.npm/30a4e689-56560-0-5084884646348655-package.lock
47 silly lockFile 468ec931-m-restful-api-0-0-16-package-tgz tar:///Users/crueber/.npm/restful-api/0.0.16/package.tgz
48 verbose lock tar:///Users/crueber/.npm/restful-api/0.0.16/package.tgz /Users/crueber/.npm/468ec931-m-restful-api-0-0-16-package-tgz.lock
49 silly lockFile 30a4e689-56560-0-5084884646348655-package tar:///var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/package
50 silly lockFile 30a4e689-56560-0-5084884646348655-package tar:///var/folders/cl/qg7qc95n4fx83_b7sk89fx8w0000gn/T/npm-76876/1391106156560-0.5084884646348655/package
51 silly lockFile 468ec931-m-restful-api-0-0-16-package-tgz tar:///Users/crueber/.npm/restful-api/0.0.16/package.tgz
52 silly lockFile 468ec931-m-restful-api-0-0-16-package-tgz tar:///Users/crueber/.npm/restful-api/0.0.16/package.tgz
53 silly lockFile 4c8b993c-r-npm-restful-api-0-0-16-package /Users/crueber/.npm/restful-api/0.0.16/package
54 verbose lock /Users/crueber/.npm/restful-api/0.0.16/package /Users/crueber/.npm/4c8b993c-r-npm-restful-api-0-0-16-package.lock
55 silly lockFile 4c8b993c-r-npm-restful-api-0-0-16-package /Users/crueber/.npm/restful-api/0.0.16/package
56 silly lockFile 4c8b993c-r-npm-restful-api-0-0-16-package /Users/crueber/.npm/restful-api/0.0.16/package
57 verbose tar unpack /Users/crueber/.npm/restful-api/0.0.16/package.tgz
58 silly lockFile a2a1c85c-r-npm-restful-api-0-0-16-package tar:///Users/crueber/.npm/restful-api/0.0.16/package
59 verbose lock tar:///Users/crueber/.npm/restful-api/0.0.16/package /Users/crueber/.npm/a2a1c85c-r-npm-restful-api-0-0-16-package.lock
60 silly lockFile 468ec931-m-restful-api-0-0-16-package-tgz tar:///Users/crueber/.npm/restful-api/0.0.16/package.tgz
61 verbose lock tar:///Users/crueber/.npm/restful-api/0.0.16/package.tgz /Users/crueber/.npm/468ec931-m-restful-api-0-0-16-package-tgz.lock
62 silly gunzTarPerm modes [ '755', '644' ]
63 silly gunzTarPerm extractEntry package.json
64 silly gunzTarPerm extractEntry README.md
65 silly gunzTarPerm extractEntry lib/api.js
66 silly gunzTarPerm extractEntry lib/be_restful.js
67 silly gunzTarPerm extractEntry lib/defaults.js
68 silly gunzTarPerm extractEntry lib/responses.js
69 verbose read json /Users/crueber/.npm/restful-api/0.0.16/package/package.json
70 silly lockFile a2a1c85c-r-npm-restful-api-0-0-16-package tar:///Users/crueber/.npm/restful-api/0.0.16/package
71 silly lockFile a2a1c85c-r-npm-restful-api-0-0-16-package tar:///Users/crueber/.npm/restful-api/0.0.16/package
72 silly lockFile 468ec931-m-restful-api-0-0-16-package-tgz tar:///Users/crueber/.npm/restful-api/0.0.16/package.tgz
73 silly lockFile 468ec931-m-restful-api-0-0-16-package-tgz tar:///Users/crueber/.npm/restful-api/0.0.16/package.tgz
74 verbose from cache /Users/crueber/.npm/restful-api/0.0.16/package/package.json
75 verbose chmod /Users/crueber/.npm/restful-api/0.0.16/package.tgz 644
76 verbose chown /Users/crueber/.npm/restful-api/0.0.16/package.tgz [ 501, 20 ]
77 silly lockFile 3a52ce78- .
78 silly lockFile 3a52ce78- .
79 silly publish { name: 'restful-api',
79 silly publish   version: '0.0.16',
79 silly publish   description: 'Build RESTful APIs via Convention.',
79 silly publish   main: './lib/api',
79 silly publish   scripts: { test: '' },
79 silly publish   repository: { type: 'git', url: 'git@github.com:crueber/restful-api.git' },
79 silly publish   keywords:
79 silly publish    [ 'node',
79 silly publish      'rest',
79 silly publish      'restful',
79 silly publish      'resource',
79 silly publish      'representation',
79 silly publish      'represent',
79 silly publish      'route',
79 silly publish      'router',
79 silly publish      'routing',
79 silly publish      'express',
79 silly publish      'web',
79 silly publish      'convention-over-configuration',
79 silly publish      'convention' ],
79 silly publish   author: { name: 'Christopher WJ Rueber' },
79 silly publish   license: 'MIT',
79 silly publish   bugs: { url: 'https://github.com/crueber/restful-api/issues' },
79 silly publish   dependencies: { lodash: '~2.4.1', async: '~0.2.10' },
79 silly publish   readme: '# Under Initial Construction.\n\nIt\'s getting closer to working, but we\'re not 100% of the way there yet. \n\nStay tuned! \n\n... if you would like to help, feel free to write some unit tests. ;)\n\nEstimated initial "live" date: February 10th, 2014.\n\n# RESTful API\n\n## What is this thing?\n\nREST. It\'s not just a bunch of letters and a vague way to get things done. It stands for REpresentational State Transfer. Luckily, over HTTP, we have an easy place for both the verbs and nouns of REST! Each request issued to a server already contains both things, all you have to do is start structuring it in a conventional pattern. Additionally, the results of these resources should be representable in multiple different formats (JSON and XML at a minimum). \n\nHere are a quick battery of RESTful APIs for a Blog\'s Post Resource:\n\n       GET /posts    // Returns a list of all posts available!\n      POST /posts    // Creates a new post!\n       GET /posts/1  // Returns a single post!\n       PUT /posts/1  // Updates a post that exists!\n    DELETE /posts/1  // Deletes a post that exists!\n\nIt should become fairly obvious why there are so many advantages of this style; Convention over configuration. Guessibility. Idempotency. Best of all, it\'s becoming the primary standard on the web. No assumptions are made (in this framework) about your applications authorization style. Though security is taken in to account for each and every resource (even for nested resources, it\'s applied all the way down the line). It is recommended that you follow REST guidelines and make it possible for each individual request to require authorization, rather than relying purely on sessions.\n\nOne of the few downfalls of REST is the lack of batch APIs. Continuing the Blog example, want to delete 80 posts? Good luck. Make 80 calls to the API. This library attempts to solve that problem on a larger scale, too.\n\n    POST /posts/batch\n         Body: { \'delete\': [1, 2, 3, 4, 5, 10, 42, 68, 99] }\n\nThe result? Returns an array of response objects, just as if you had made all 9 calls individually! Need to make an update call for a whole bunch of posts at a time? Create a bunch? Easy peasy:\n\n    POST /posts/batch\n         Body: { \'update\': { 1: { title: \'My new title!\' }, 2: { author: \'Walter White\' } } }\n    POST /posts/batch\n         Body: { \'create\': [{ name: \'New post!\', body: \'Some stuff..\' }, { name: \'Another...\', body: \'This is nifty!\'}] }\n\n#### Limitations and/or Assumptions\n\n* ExpressJS: Most apps in Node utilize Express, and this library is no different. If you have thoughts on how to extend it past express, I\'m all ears.\n* HTTP Verbs PUT == PATCH. It is my belief that you don\'t generally want to smash a whole object, and shouldn\'t need to include every attribute. Modern devices need to consume less bandwidth to have more responsivity. That\'s not saying that you couldn\'t use your update action for both, but this library has chosen not to split them out.\n* That\'s it! You define your security model, you can use whatever databases you\'re currently using; You just have to follow some basic patterns in order to get started.\n\n## Why did I do this?\n\nNone of the available REST libraries did what I wanted. They were either too obscure, not well documented enough, or just flat out got REST wrong. My goals for this project are:\n\n1. Keep it RESTful. No veering. It really isn\'t that hard, and should make the API easier to use and understand.\n2. Simple RESTful APIs should be fast to build, but also feature rich.\n3. Complicated APIs shouldn\'t require any extra architecting.\n4. RESTful by default. HTTP verbs and nouns, but only for what your app knows. No managing 403s and 405s.\n5. Filters! Finder, secure, and before and after filters. Applied for every level of nesting. Keep your concerns clean!\n6. Represent array/hash data, in any format. JSON and XML provided by default.\n7. Sane but overridable defaults.\n8. **Single Page Applications (SPAs) need sane, growable APIs**. This is my primary motivation for this library. No display API will be provided for \'new\', \'edit\', or \'list\', because the intention of this library is specifically to solve a data problem, not a display one. Take a look at Angular, Backbone, or Ember if you\'re looking for an SPA framework.\n\n### What problems will this library not solve for me?\n\n1. User authentication. Well outside the purview of this library.\n2. The "V" of MVC. Views are another domain that needs solving separately.\n3. Non-conventional API building. If you want to build APIs that don\'t conform to REST, you\'re in the wrong place!\n\n## Getting Started\n\n### Step 1: Set up restful-api\n\n    npm install restful-api --save\n\n### Step 2: Initialize restful-api\n\nFirst you have to require the restful-api, at some point after your express initialization.\n\n    var rest = new require(\'restful-api\')(app); // where \'app\' is your express application.\n\nThere is a second parameter available as a default override. Lets say you decided to call your indices \'list\' instead of \'index\'. You could apply that as default across your app in one fell swoop, like so:\n\n    var rest = new require(\'restful-api\')(app, { index: \'list\' })\n\nFor more info on defaults, take a look at `restful-api/lib/defaults.js`\n\n### Step 3: Register your controllers\n\nThis isn\'t obvious when you first look at it, but will become more understandable when you get to Step 5 (where "Controller" is explained).\n\n    rest.register_controller(\'posts\', PostsController)\n\nor, if you would prefer to regisgter multiple at once...\n\n    rest.register_controller({ \'posts\': PostsController, \'comments\': CommentsController })\n\n### Step 4: Register your resources individually (they can be nested!).\n\nThe first parameter in the registering of the controller (Step 3) is the what you use as parameters, here.\n\n    rest.resource(\'posts\')              // <-- Produces /posts pathing!\n    rest.resource(\'posts\', \'comments\')  // <-- Produces /posts/:post_id/comments pathing! ..hang tight for more info on this.\n\nThe last parameter may be used for overriding defaults, just the same way as mentioned in Step 2. Ex:\n\n    rest.resource(\'posts\', { read: \'show\' }) // uses the \'show\' function on the Controller, instead of the \'read\' function.\n\n### Step 5: Start building your controllers in this fashion!\n\nThese are the properties and callbacks that a controller may have on it. All callbacks are the last arg of the function signature, \nand they all follow the node convention of callback(err, args...).\n\n    PostsController = {\n      finder: function (identifier, is_index, callback) {},     // identifier is a string that was passed in the URI.\n                                                                // is_index is a boolean for if this was called from an index or not\n                                                                // callback takes err and the model. the model will be set on req[controller_name] for subsequent requests.\n      secure: function (req, is_nested, is_secure_callback) {}, // is_nested indicates whether this controllers action will be called. \n                                                                // is_secure_callback takes err and a boolean to indicate if the request is authorized.\n      before_filters: [ function (req, res, callback) ],        // filters that are run before the resource function. Callback takes err.\n      after_filters: [ function (req, res, callback) ],         // filters that are run after the resource function, and after the response has been sent. Callback takes err.\n      \n      // ** Actions: These are the actually heavy lifters of a resource.\n      index: function (req, res, data) {},     // data is a callback that accepts error and an array of serializable objects. Each object must contain an \'id\' property.\n      read: function (req, res, data) {},      // data is a callback that accepts error and a serializable object. Must contain on \'id\' property.\n      create: function (req, res, data) {},    // data is a callback that takes error and a serializable version of the created resource. Must contain an \'id\' property.\n      update: function (req, res, data) {},    // data is a callback that takes error and a serializable version of the updated resource. Must contain an \'id\' property.\n      remove: function (req, res, success) {}, // success is a callback that takes error. If there isn\'t one, it returns 200 to indicate success.\n    }\n\nNote that if you omit any of these, it doesn\'t matter! They\'re simply not applied to that particular resource. Missing a finder? No biggy. No security necessary? Omit the secure property. Don\'t need an index? Don\'t use it! That simple. Oh, and if you omit an action, a proper 405 will be returned by default.\n\n#### Notes\n\n**Nested Controllers**: When you nest your controllers (say, posts/comments), only the action of the final controller is called. But the finder and secure filters are run on every single controller, from left to right. That means that if you lock down a posts controller, it\'ll apply all the way down the line. Make sure you make use of the is_nested boolean so that you don\'t unnecessarily lock down controllers that are further down the execution path!\n\n**Batch API**: When you use the batch API, you are running the final resources finder, secure, filters, and action, multiple times, with different identifiers for finder each time. So you don\'t have to change anything in order to deal with those batches.\n\n### Step 6: ...\n\n### Step 7: Profit!\n\n...yup, that\'s it! It\'s that easy. And now, you\'ll have an amazingly easy way to build APIs quickly and efficiently.\n\n## Comments? Concerns?\n\nThere is an issue tracker associated with this library on github. Please feel free to open an issue if you feel that something is incorrect, or come find me on twitter: @crueber.',
79 silly publish   readmeFilename: 'README.md',
79 silly publish   _id: 'restful-api@0.0.16',
79 silly publish   dist: { shasum: '9606d4888b92f8b888ed76be2f017179ff1cd4a3' },
79 silly publish   _from: '.' }
80 verbose url raw restful-api
81 verbose url resolving [ 'https://registry.npmjs.org/', './restful-api' ]
82 verbose url resolved https://registry.npmjs.org/restful-api
83 info trying registry request attempt 1 at 12:22:38
84 http PUT https://registry.npmjs.org/restful-api
85 http 409 https://registry.npmjs.org/restful-api
86 verbose url raw restful-api
87 verbose url resolving [ 'https://registry.npmjs.org/', './restful-api' ]
88 verbose url resolved https://registry.npmjs.org/restful-api
89 info trying registry request attempt 1 at 12:22:38
90 http GET https://registry.npmjs.org/restful-api
91 http 200 https://registry.npmjs.org/restful-api
92 error publish fail Cannot publish over existing version.
92 error publish fail Update the 'version' field in package.json and try again.
92 error publish fail
92 error publish fail If the previous version was published in error, see:
92 error publish fail     npm help unpublish
92 error publish fail
92 error publish fail To automatically increment version numbers, see:
92 error publish fail     npm help version
93 error System Darwin 13.0.0
94 error command "/Users/crueber/.nvm/v0.10.12/bin/node" "/Users/crueber/.nvm/v0.10.12/bin/npm" "publish"
95 error cwd /Users/crueber/dev/clear/restful-api
96 error node -v v0.10.12
97 error npm -v 1.2.32
98 error code EPUBLISHCONFLICT
99 verbose exit [ 1, true ]
